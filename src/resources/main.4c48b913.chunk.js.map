{"version":3,"sources":["reducers/databaseReducer.js","reducers/uiReducer.js","reducers/tableReducer.js","reducers/columnReducer.js","reducers/relationReducer.js","reducers/index.js","actions/constants.js","store/LocalStorageMiddleware.js","store/index.js","utils/helpers.js","components/DrawRelationLine.js","components/ExportDatabase.js","containers/ExportDatabase.js","components/ImportDatabase.js","components/Header.js","actions/ActionCreators.js","containers/Header.js","components/Modals/DbModal.js","containers/Modals/DbModal.js","utils/shallowEqual.js","components/Modals/TableModal.js","containers/Modals/TableModal.js","components/Modals/ForeignKeyForm.js","components/Modals/ColumnModal.js","containers/Modals/ColumnModal.js","components/Column.js","components/Columns.js","containers/Columns.js","components/Table.js","containers/Table.js","components/Tables.js","containers/Tables.js","components/Schema.js","app.js","index.js"],"names":["initialState","name","database","showModal","edit","table","editData","id","softDelete","timeStamp","column","type","length","defValue","comment","autoInc","nullable","unique","index","unsigned","foreignKey","references","on","tableId","positions","combineReducers","state","action","ui","show","editMode","update","$set","data","Object","keys","x","y","$apply","newPos","tables","$push","filter","map","columns","rest","needUpdate","mapValues","columnData","relations","newState","relation","source","target","columnId","matched","LocalstorageMiddleware","store","next","result","window","localStorage","setItem","JSON","stringify","getState","createLogger","middleware","LocalStorageMiddleware","localData","getItem","parse","error","removeItem","console","log","getInitialState","createStore","Reducers","compose","applyMiddleware","DrawRelationLine","drawRelation","props","jsPlumb","ready","reset","forEach","connect","overlays","location","width","endpoints","radius","paintStyle","stroke","strokeWidth","endpointStyle","fillStyle","importDefaults","Connector","cornerRadius","Anchor","faces","ConnectionsDetachable","Container","document","body","this","PureComponent","exportTooltip","exportJsonTooltip","ExportDatabase","handleSubmit","schema","packageMode","form","submit","jsonData","url","encodeURIComponent","download","setAttribute","click","node","querySelector","csrfToken","getAttribute","className","method","ref","value","placement","overlay","delayShow","rootClose","onClick","disabled","Component","importTooltip","ImportDatabase","input","handleFileUpload","e","file","files","substr","lastIndexOf","alert","FileReader","reader","onload","reload","readAsText","openFileSelectionWindow","accept","onChange","tableTooltip","trashTooltip","forkTooltip","Header","clearSchemaData","toggleDbModal","dbName","dbModal","nextProps","toggleTableModal","href","toggleColumnModal","saveColumn","saveForeignKeyRelation","dispatch","DbModal","event","preventDefault","dbname","trim","saveDbName","onHide","Body","onSubmit","placeholder","defaultValue","autoFocus","hasOwn","prototype","hasOwnProperty","shallowEqual","a","b","countA","countB","key","call","TableModal","duplicateName","focusInput","focus","saveTable","updateTable","Math","random","toString","substring","color","softdelete","checked","timestamp","findIndex","setState","showTableModal","onEntered","dialogClassName","Title","classnames","htmlFor","defaultChecked","Footer","ForeignKeyForm","getData","currentForeignColumnId","currentForeignColumnName","currentForeignTableId","currentForeignTableName","invalidData","setCurrentForeignTable","selected","find","setCurrentForeignColumn","undefined","ColumnModal","columnType","foreignKeyEnabled","isUnsigned","getFormData","saveColumnAndContinue","saveColumnAndExit","updateColumn","updateColumnType","updateUnsignedValue","updateForeignKeyValue","showColumnModal","label","indexOf","hideModal","updateForeignKeyRelation","Column","editColumn","onEditColumn","removeColumn","onRemoveColumn","title","onKeyPress","noop","Columns","ownProps","enableColumnEdit","Table","editTable","onEditTable","removeTable","onRemoveTable","onToggleColumnModal","position","style","left","top","getPosition","createSelector","Tables","makeTablesDraggable","storeTablePosition","draggable","querySelectorAll","drag","pos","getElementById","el","repaintEverything","stop","finalPos","i","zIndex","prevProps","enableTableEdit","Schema","App","dom","render"],"mappings":"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","file":"static/js/main.4c48b913.chunk.js","sourcesContent":["import * as types from '../actions/constants';\n\nconst initialState = {\n    name: ''\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case types.SAVE_DB_NAME:\n            return { name: action.name };\n        default:\n            return state;\n    }\n};\n","import update from 'immutability-helper';\nimport * as types from '../actions/constants';\n\nconst initialState = {\n    database: {\n        showModal: false,\n        edit: false\n    },\n    table: {\n        showModal: false,\n        edit: false,\n        editData: {\n            id: '',\n            name: '',\n            softDelete: false,\n            timeStamp: true\n        }\n    },\n    column: {\n        showModal: false,\n        edit: false,\n        editData: {\n            id: '',\n            name: '',\n            type: 'integer',\n            length: '',\n            defValue: '',\n            comment: '',\n            autoInc: false,\n            nullable: false,\n            unique: false,\n            index: false,\n            unsigned: false,\n            foreignKey: {\n                references: {\n                    id: '',\n                    name: ''\n                },\n                on: {\n                    id: '',\n                    name: ''\n                }\n            }\n        },\n        tableId: ''\n    },\n    positions: {}\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case types.TOGGLE_DB_MODAL: {\n            const show = state.database.showModal;\n\n            if (show) {\n                return {\n                    ...state,\n                    database: {\n                        showModal: false,\n                        edit: false\n                    }\n                };\n            }\n\n            return {\n                ...state,\n                database: {\n                    showModal: true,\n                    edit: action.editMode\n                }\n            };\n        }\n        case types.TOGGLE_TABLE_MODAL: {\n            const show = state.table.showModal;\n\n            if (show) {\n                // Reset edit data & edit mode before hiding modal\n                return update(state, {\n                    table: {\n                        showModal: { $set: false },\n                        edit: { $set: false },\n                        editData: { $set: initialState.table.editData }\n                    }\n                });\n            }\n\n            return update(state, {\n                table: {\n                    showModal: { $set: true }\n                }\n            });\n        }\n        case types.ENABLE_TABLE_EDIT:\n            return update(state, {\n                table: {\n                    edit: { $set: true },\n                    editData: { $set: action.data }\n                }\n            });\n        case types.TOGGLE_COLUMN_MODAL: {\n            const show = state.column.showModal;\n\n            if (show) {\n                // Reset edit data & edit mode before hiding modal\n                return update(state, {\n                    column: {\n                        showModal: { $set: false },\n                        tableId: { $set: '' },\n                        edit: { $set: false },\n                        editData: { $set: initialState.column.editData }\n                    }\n                });\n            }\n\n            return update(state, {\n                column: {\n                    showModal: { $set: true },\n                    tableId: { $set: action.tableId }\n                }\n            });\n        }\n        case types.ENABLE_COLUMN_EDIT:\n            return update(state, {\n                column: {\n                    edit: { $set: true },\n                    editData: { $set: action.data },\n                    tableId: { $set: action.tableId }\n                }\n            });\n        case types.SAVE_TABLE: {\n            const length = Object.keys(state.positions).length;\n            return update(state, {\n                positions: {\n                    [action.data.id]: {\n                        $set: {\n                            x: 0 + (length * 40),\n                            y: 0 + (length * 40)\n                        }\n                    }\n                }\n            });\n        }\n        case types.REMOVE_TABLE: {\n            return update(state, {\n                positions: {\n                    $apply: (table) => {\n                        const { [action.id]: omit, ...rest } = table; // eslint-disable-line no-unused-vars\n                        return rest;\n                    }\n                }\n            });\n        }\n        case types.STORE_TABLE_POSITION:\n            return update(state, {\n                positions: {\n                    [action.newPos.id]: {\n                        $set: {\n                            x: action.newPos.x,\n                            y: action.newPos.y\n                        }\n                    }\n                }\n            });\n        default:\n            return state;\n    }\n};\n","import update from 'immutability-helper';\nimport * as types from '../actions/constants';\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case types.SAVE_TABLE:\n            return update(state, {\n                $push: [action.data]\n            });\n        case types.REMOVE_TABLE:\n            return state.filter((table) => table.id !== action.id);\n        case types.UPDATE_TABLE:\n            return state.map((table) => {\n                if (table.id === action.data.id) {\n                    return action.data;\n                }\n\n                return table;\n            });\n        default:\n            return state;\n    }\n};\n","import update from 'immutability-helper';\nimport mapValues from 'lodash/mapValues';\nimport * as types from '../actions/constants';\n\nconst initialState = {};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case types.SAVE_TABLE:\n            // Push new key for storing columns for this table\n            return update(state, {\n                [action.data.id]: { $set: [] }\n            });\n        case types.REMOVE_TABLE: {\n            // Drop all columns for this table\n            const { [action.id]: omit, ...rest } = state; // eslint-disable-line no-unused-vars\n            return rest;\n        }\n        case types.UPDATE_TABLE: {\n            // Update table name in foreign key data for each column\n            // which references this table\n            let needUpdate = false;\n            const data = mapValues(state, (columns) => (\n                columns.map((column) => {\n                    const foreignKey = column.foreignKey;\n\n                    if (foreignKey.on.id === action.data.id) {\n                        needUpdate = true;\n                        return update(column, {\n                            foreignKey: {\n                                on: {\n                                    name: {\n                                        $set: action.data.name\n                                    }\n                                }\n                            }\n                        });\n                    }\n\n                    return column;\n                })\n            ));\n\n            if (!needUpdate) {\n                // No changes in column data, return previous\n                // state to prevent re-render\n                return state;\n            }\n\n            return data;\n        }\n        case types.SAVE_COLUMN:\n            return update(state, {\n                [action.tableId]: {\n                    $push: [action.data]\n                }\n            });\n        case types.REMOVE_COLUMN: {\n            // Update all columns which reference this column as a foreign key\n            let needUpdate = false;\n            const data = mapValues(state, (columns) => (\n                columns.map((column) => {\n                    const foreignKey = column.foreignKey;\n\n                    if (foreignKey.references.id === action.columnData.id) {\n                        needUpdate = true;\n\n                        return {\n                            ...column,\n                            foreignKey: {\n                                references: {\n                                    id: '',\n                                    name: ''\n                                },\n                                on: {\n                                    id: '',\n                                    name: ''\n                                }\n                            }\n                        };\n                    }\n\n                    return column;\n                })\n            ));\n\n            if (!needUpdate) {\n                // No changes in other columns, update previous state\n                // to prevent re-render in other tables\n                return update(state, {\n                    [action.tableId]: {\n                        $apply: (columns) => (\n                            columns.filter((column) => column.id !== action.columnData.id)\n                        )\n                    }\n                });\n            }\n\n            return update(data, {\n                [action.tableId]: {\n                    $apply: (columns) => (\n                        columns.filter((column) => column.id !== action.columnData.id)\n                    )\n                }\n            });\n        }\n        case types.UPDATE_COLUMN: {\n            const data = state[action.tableId].map((column) => {\n                if (column.id === action.data.id) {\n                    return action.data;\n                }\n\n                return column;\n            });\n\n            return update(state, {\n                [action.tableId]: { $set: data }\n            });\n        }\n        default:\n            return state;\n    }\n};\n","import update from 'immutability-helper';\nimport * as types from '../actions/constants';\n\nconst initialState = [];\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case types.REMOVE_TABLE: {\n            // Drop all associated relations for this table\n            const newState = state.filter((relation) => (relation.source.tableId !== action.id) &&\n                relation.target.tableId !== action.id);\n\n            if (state.length === newState.length) {\n                // No changes, return previous state to prevent re-render\n                return state;\n            }\n\n            return newState;\n        }\n        case types.REMOVE_COLUMN: {\n            // Drop all associated relations for this column\n            const columnId = action.columnData.id;\n\n            const newState = state.filter((relation) => (relation.source.columnId !== columnId &&\n                relation.target.columnId !== columnId));\n\n            if (state.length === newState.length) {\n                // No changes, return previous state to prevent re-render\n                return state;\n            }\n\n            return newState;\n        }\n        case types.SAVE_FOREIGN_KEY_RELATION:\n            if (action.columnData.foreignKey.on.id) {\n                return update(state, {\n                    $push: [{\n                        source: {\n                            columnId: action.columnData.id,\n                            tableId: action.tableId\n                        },\n                        target: {\n                            columnId: action.columnData.foreignKey.references.id,\n                            tableId: action.columnData.foreignKey.on.id\n                        }\n                    }]\n                });\n            }\n\n            return state;\n        case types.UPDATE_FOREIGN_KEY_RELATION: {\n            const foreignKey = action.columnData.foreignKey;\n\n            if (foreignKey.on.id) {\n                let matched = false;\n                const newState = state.map((relation) => {\n                    if (relation.source.columnId === action.columnData.id) {\n                        // Relation exists, so update it\n                        matched = true;\n                        return {\n                            source: {\n                                columnId: action.columnData.id,\n                                tableId: action.tableId\n                            },\n                            target: {\n                                columnId: action.columnData.foreignKey.references.id,\n                                tableId: action.columnData.foreignKey.on.id\n                            }\n                        };\n                    }\n\n                    return relation;\n                });\n\n                if (matched) {\n                    return newState;\n                }\n\n                return update(state, {\n                    $push: [{\n                        source: {\n                            columnId: action.columnData.id,\n                            tableId: action.tableId\n                        },\n                        target: {\n                            columnId: action.columnData.foreignKey.references.id,\n                            tableId: action.columnData.foreignKey.on.id\n                        }\n                    }]\n                });\n            }\n\n            // No foreign key relation is assigned to the column, so\n            // remove any relation referred by the column if exists\n            const newState = state.filter((relation) => (relation.source.columnId !== action.columnData.id));\n\n            if (state.length === newState.length) {\n                // No changes, return previous state to prevent re-render\n                return state;\n            }\n\n            return newState;\n        }\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport databaseReducer from './databaseReducer';\nimport uiReducer from './uiReducer';\nimport tableReducer from './tableReducer';\nimport columnReducer from './columnReducer';\nimport relationReducer from './relationReducer';\n\nexport default combineReducers({\n    database: databaseReducer,\n    ui: uiReducer,\n    tables: tableReducer,\n    columns: columnReducer,\n    relations: relationReducer\n});\n","// Action Constants\nexport const TOGGLE_DB_MODAL = 'TOGGLE_DB_MODAL';\nexport const SAVE_DB_NAME = 'SAVE_DB_NAME';\nexport const TOGGLE_TABLE_MODAL = 'TOGGLE_TABLE_MODAL';\nexport const SAVE_TABLE = 'SAVE_TABLE';\nexport const REMOVE_TABLE = 'REMOVE_TABLE';\nexport const ENABLE_TABLE_EDIT = 'ENABLE_TABLE_EDIT';\nexport const UPDATE_TABLE = 'UPDATE_TABLE';\nexport const TOGGLE_COLUMN_MODAL = 'TOGGLE_COLUMN_MODAL';\nexport const SAVE_COLUMN = 'SAVE_COLUMN';\nexport const REMOVE_COLUMN = 'REMOVE_COLUMN';\nexport const ENABLE_COLUMN_EDIT = 'ENABLE_COLUMN_EDIT';\nexport const UPDATE_COLUMN = 'UPDATE_COLUMN';\nexport const SAVE_FOREIGN_KEY_RELATION = 'SAVE_FOREIGN_KEY_RELATION';\nexport const UPDATE_FOREIGN_KEY_RELATION = 'UPDATE_FOREIGN_KEY_RELATION';\nexport const STORE_TABLE_POSITION = 'STORE_TABLE_POSITION';\n","const LocalstorageMiddleware = (store) => (next) => (action) => {\n    const result = next(action);\n\n    // Save redux store data in localStorage\n    window.localStorage.setItem('schema', JSON.stringify(store.getState()));\n\n    return result;\n};\n\nexport default LocalstorageMiddleware;\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport Reducers from '../reducers';\nimport LocalStorageMiddleware from './LocalStorageMiddleware';\nimport { getInitialState } from '../utils/helpers';\n\nconst logger = createLogger();\nconst middleware = [LocalStorageMiddleware];\n\nlet extension = (next) => next;\n\nif (process.env.NODE_ENV !== 'production') {\n    middleware.push(logger);\n    extension = window.devToolsExtension ? window.devToolsExtension() : extension;\n}\n\nconst initialState = getInitialState();\n\nconst store = createStore(Reducers, initialState, compose(applyMiddleware(...middleware), extension));\n\nif (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', () => {\n        const nextRootReducer = require('../reducers/index').default; // eslint-disable-line global-require\n        store.replaceReducer(nextRootReducer);\n    });\n}\n\nexport default store;\n","/**\n * @flow\n */\nexport function isFractionType(type: string): boolean {\n    const fractionType = ['decimal', 'double', 'float'];\n\n    return fractionType.indexOf(type) !== -1;\n}\n\nexport function getInitialState() {\n    // Check if state is stored in localStorage\n    const localData = window.localStorage.getItem('schema');\n\n    if (localData) {\n        try {\n            const jsonData = JSON.parse(localData);\n\n            return jsonData;\n        } catch (error) {\n            // Invalid JSON data, clear localStorage\n            window.localStorage.removeItem('schema');\n\n            console.log('Unable to parse json data from' // eslint-disable-line no-console\n                + ' localStorage, starting from scratch');\n\n            return {};\n        }\n    }\n\n    return {};\n}\n","/**\n * @flow\n */\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport jsPlumb from 'jsplumb';\nimport type { RelationType } from '../utils/flowtypes';\n\ntype Props = {\n    relations: Array<RelationType>\n};\n\nclass DrawRelationLine extends PureComponent<Props> {\n    componentDidMount() {\n        jsPlumb.importDefaults({\n            Connector: ['Flowchart', { cornerRadius: 5 }],\n            Anchor: ['Continuous', { faces: ['left', 'right'] }],\n            ConnectionsDetachable: false,\n            Container: document.body\n        });\n\n        // Needed for initial render from localStorage\n        this.drawRelation();\n    }\n\n    componentDidUpdate() {\n        this.drawRelation();\n    }\n\n    drawRelation = () => {\n        const { relations } = this.props;\n\n        jsPlumb.ready(() => {\n            // Reset all endpoints and connections\n            jsPlumb.reset();\n\n            relations.forEach((relation) => {\n                jsPlumb.connect({\n                    source: relation.source.columnId,\n                    target: relation.target.columnId,\n                    overlays: [\n                        ['Arrow', { location: 1, width: 12, length: 12 }]\n                    ],\n                    endpoints: [['Dot', { radius: 8 }], 'Blank'],\n                    paintStyle: { stroke: '#7f8c8d', strokeWidth: 2 },\n                    endpointStyle: { fillStyle: '#7f8c8d' }\n                });\n            });\n        });\n    }\n\n    render() {\n        console.log('DrawRelationLine rendering'); // eslint-disable-line no-console\n        return null;\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    relations: state.relations\n});\n\nexport default connect(mapStateToProps)(DrawRelationLine);\n","/**\n * @flow\n */\nimport React, { Component } from 'react';\nimport OverlayTrigger from 'react-bootstrap/lib/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/lib/Tooltip';\nimport type { ColumnType, RelationType, TableType, UiType } from '../utils/flowtypes';\n\nconst exportTooltip = (\n    <Tooltip id='export-tooltip'><strong>Generate Database Migrations</strong></Tooltip>\n);\n\nconst exportJsonTooltip = (\n    <Tooltip id='export-tooltip'><strong>Export Schema</strong></Tooltip>\n);\n\ntype Props = {\n    data: {\n        database: {\n            name: string\n        },\n        ui: UiType,\n        tables: Array<TableType>,\n        columns: {\n            [tableId: string]: Array<ColumnType>\n        },\n        relations: Array<RelationType>\n    }\n};\n\nclass ExportDatabase extends Component<Props> {\n    // Flow type for refs\n    download: any\n    form: any\n\n    handleSubmit = () => {\n        if (typeof window.schema === 'object' &&\n                window.schema.packageMode) {\n            this.form.submit();\n        } else {\n            const { data } = this.props;\n            const jsonData = JSON.stringify(data, null, 4);\n            const url = `data:application/json;charset=utf8,${ encodeURIComponent(jsonData) }`;\n\n            this.download.setAttribute('href', url);\n            this.download.setAttribute('download', 'schema.json');\n            this.download.click();\n        }\n    }\n\n    render() {\n        console.log('ExportDatabase rendering'); // eslint-disable-line no-console\n        const { data } = this.props;\n        const packageMode = typeof window.schema === 'object' && window.schema.packageMode;\n        const node = document.querySelector('meta[name=\"csrf-token\"]');\n        let csrfToken = '';\n\n        if (node) {\n            csrfToken = node.getAttribute('content');\n        }\n\n        return (\n            <li>\n                <form\n                    className='form-inline'\n                    method='POST'\n                    action=''\n                    ref={ (form) => { this.form = form; } }\n                >\n                    <input type='hidden' name='schema' value={ JSON.stringify(data) } />\n                    <input type='hidden' name='_token' value={ csrfToken } />\n                </form>\n                <OverlayTrigger\n                    placement='bottom'\n                    overlay={ packageMode ? exportTooltip : exportJsonTooltip }\n                    delayShow={ 300 }\n                    rootClose\n                >\n                    <button\n                        className='fa fa-download'\n                        onClick={ this.handleSubmit }\n                        disabled={ !data.tables.length }\n                    >\n                    </button>\n                </OverlayTrigger>\n                {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n                <a className='hidden' ref={ (download) => { this.download = download; } }>\n                    Export Schema\n                </a>\n            </li>\n        );\n    }\n}\n\nexport default ExportDatabase;\n","/**\n * @flow\n */\nimport { connect } from 'react-redux';\nimport ExportDatabase from '../components/ExportDatabase';\n\nconst mapStateToProps = (state) => ({\n    data: state\n});\n\nexport default connect(mapStateToProps)(ExportDatabase);\n","/**\n * @flow\n */\n// $FlowFixMe\nimport React, { Component, SyntheticEvent } from 'react';\nimport OverlayTrigger from 'react-bootstrap/lib/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/lib/Tooltip';\n\nconst importTooltip = (\n    <Tooltip id='import-tooltip'><strong>Import Schema</strong></Tooltip>\n);\n\nclass ImportDatabase extends Component<{}> {\n    input = null;\n\n    handleFileUpload = (e: SyntheticEvent) => {\n        const file = e.target.files[0];\n        const extension = file.name.substr(file.name.lastIndexOf('.'));\n\n        if (extension !== '.json' || file.type !== 'application/json') {\n            alert('Please select the exported schema.json file'); // eslint-disable-line no-alert\n            // Reset the current file input\n            e.target.value = null; // eslint-disable-line no-param-reassign\n            return;\n        }\n\n        if (typeof FileReader === 'function') {\n            const reader = new FileReader();\n\n            reader.onload = () => {\n                try {\n                    // $FlowFixMe\n                    const jsonData = JSON.parse(reader.result);\n\n                    // Set data to localStorage\n                    window.localStorage.setItem('schema', JSON.stringify(jsonData));\n\n                    // Reload the page\n                    window.location.reload();\n                } catch (error) {\n                    console.error(error); // eslint-disable-line no-console\n                    alert('Invalid json supplied'); // eslint-disable-line no-alert\n                }\n            };\n\n            reader.readAsText(file);\n        } else {\n            alert('Sorry, FileReader API not supported'); // eslint-disable-line no-alert\n        }\n    }\n\n    openFileSelectionWindow = () => {\n        if (this.input) {\n            this.input.click();\n        }\n    }\n\n    render() {\n        return (\n            <li>\n                <OverlayTrigger\n                    placement='bottom'\n                    overlay={ importTooltip }\n                    delayShow={ 300 }\n                    rootClose\n                >\n                    <button className='fa fa-upload' onClick={ this.openFileSelectionWindow }></button>\n                </OverlayTrigger>\n                <input\n                    id='file-upload'\n                    ref={ (input) => { this.input = input; } }\n                    type='file'\n                    accept='.json'\n                    onChange={ this.handleFileUpload }\n                />\n            </li>\n        );\n    }\n}\n\nexport default ImportDatabase;\n","/**\n * @flow\n */\nimport React, { Component } from 'react';\nimport OverlayTrigger from 'react-bootstrap/lib/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/lib/Tooltip';\nimport ExportDatabase from '../containers/ExportDatabase';\nimport ImportDatabase from './ImportDatabase';\n\nconst tableTooltip = (\n    <Tooltip id='table-tooltip'><strong>Create New Table</strong></Tooltip>\n);\n\nconst trashTooltip = (\n    <Tooltip id='trash-tooltip'><strong>Clear Current Schema</strong></Tooltip>\n);\n\nconst forkTooltip = (\n    <Tooltip id='fork-tooltip'><strong>Fork me on Github</strong></Tooltip>\n);\n\ntype Props = {\n    dbName: string,\n    dbModal: boolean,\n    toggleDbModal: (editMode?: boolean) => void,\n    toggleTableModal: () => void\n};\n\nclass Header extends Component<Props> {\n    constructor(props: Props) {\n        super(props);\n\n        if (!props.dbName && !props.dbModal) {\n            props.toggleDbModal();\n        }\n    }\n\n    shouldComponentUpdate(nextProps: Props) {\n        // Update only if database name changes\n        return this.props.dbName !== nextProps.dbName;\n    }\n\n    clearSchemaData = () => {\n        window.localStorage.removeItem('schema');\n        window.location.reload();\n    }\n\n    toggleDbModal = () => {\n        const editMode = true;\n        this.props.toggleDbModal(editMode);\n    }\n\n    render() {\n        console.log('Header rendering'); // eslint-disable-line no-console\n        const { dbName, toggleTableModal } = this.props;\n\n        return (\n            <header>\n                <div className='container'>\n                    <div className='row'>\n                        <div className='title col-xs-5 col-sm-4 text-left'>\n                            <strong>Schema Builder</strong>\n                        </div>\n                        <div className='db-name col-xs-5 col-sm-4 text-center'>\n                            <span><i className='fa fa-database'></i> { dbName }</span>\n                            { !!dbName &&\n                                <sup>\n                                    <button\n                                        className='fa fa-edit'\n                                        onClick={ this.toggleDbModal }\n                                    >\n                                    </button>\n                                </sup>\n                            }\n                        </div>\n                        <div className='menu col-xs-2 col-sm-4 text-right'>\n                            <ul className='list-inline'>\n                                <li>\n                                    <OverlayTrigger\n                                        placement='bottom'\n                                        overlay={ tableTooltip }\n                                        delayShow={ 300 }\n                                        rootClose\n                                    >\n                                        <button\n                                            className='fa fa-plus'\n                                            onClick={ toggleTableModal }\n                                        >\n                                        </button>\n                                    </OverlayTrigger>\n                                </li>\n                                <li>\n                                    <OverlayTrigger\n                                        placement='bottom'\n                                        overlay={ trashTooltip }\n                                        delayShow={ 300 }\n                                        rootClose\n                                    >\n                                        <button\n                                            className='fa fa-trash-o'\n                                            onClick={ this.clearSchemaData }\n                                        >\n                                        </button>\n                                    </OverlayTrigger>\n                                </li>\n\n                                <ExportDatabase />\n\n                                <ImportDatabase />\n\n                                <li>\n                                    <OverlayTrigger\n                                        placement='bottom'\n                                        overlay={ forkTooltip }\n                                        delayShow={ 300 }\n                                        rootClose\n                                    >\n                                        <a href='https://github.com/Agontuk/schema-designer'>\n                                            <i className='fa fa-github fa-lg' />\n                                        </a>\n                                    </OverlayTrigger>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","/**\n * @flow\n */\nimport * as types from './constants';\nimport type { ColumnType, TablePositionType, TableType } from '../utils/flowtypes';\n\nexport function toggleDbModal(editMode?: boolean) {\n    return {\n        type: types.TOGGLE_DB_MODAL,\n        editMode\n    };\n}\n\nexport function saveDbName(name: string) {\n    return {\n        type: types.SAVE_DB_NAME,\n        name\n    };\n}\n\nexport function toggleTableModal() {\n    return {\n        type: types.TOGGLE_TABLE_MODAL\n    };\n}\n\nexport function saveTable(data: TableType) {\n    return {\n        type: types.SAVE_TABLE,\n        data\n    };\n}\n\nexport function removeTable(id: string) {\n    return {\n        type: types.REMOVE_TABLE,\n        id\n    };\n}\n\nexport function enableTableEdit(data: TableType) {\n    return {\n        type: types.ENABLE_TABLE_EDIT,\n        data\n    };\n}\n\nexport function updateTable(data: TableType) {\n    return {\n        type: types.UPDATE_TABLE,\n        data\n    };\n}\n\nexport function toggleColumnModal(tableId?: string) {\n    return {\n        type: types.TOGGLE_COLUMN_MODAL,\n        tableId\n    };\n}\n\nexport function saveColumn(data: ColumnType, tableId: string) {\n    return {\n        type: types.SAVE_COLUMN,\n        data,\n        tableId\n    };\n}\n\nexport function removeColumn(columnData: ColumnType, tableId: string) {\n    return {\n        type: types.REMOVE_COLUMN,\n        columnData,\n        tableId\n    };\n}\n\nexport function enableColumnEdit(data: ColumnType, tableId: string) {\n    return {\n        type: types.ENABLE_COLUMN_EDIT,\n        data,\n        tableId\n    };\n}\n\nexport function updateColumn(data: ColumnType, tableId: string) {\n    return {\n        type: types.UPDATE_COLUMN,\n        data,\n        tableId\n    };\n}\n\nexport function saveForeignKeyRelation(columnData: ColumnType, tableId: string) {\n    return {\n        type: types.SAVE_FOREIGN_KEY_RELATION,\n        columnData,\n        tableId\n    };\n}\n\nexport function updateForeignKeyRelation(columnData: ColumnType, tableId: string) {\n    return {\n        type: types.UPDATE_FOREIGN_KEY_RELATION,\n        columnData,\n        tableId\n    };\n}\n\nexport function storeTablePosition(newPos: TablePositionType) {\n    return {\n        type: types.STORE_TABLE_POSITION,\n        newPos\n    };\n}\n","/**\n * @flow\n */\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { toggleDbModal, toggleTableModal } from '../actions/ActionCreators';\n\nconst mapStateToProps = (state) => ({\n    dbName: state.database.name,\n    dbModal: state.ui.database.showModal\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    toggleDbModal: (editMode = false) => {\n        dispatch(toggleDbModal(editMode));\n    },\n    toggleTableModal: () => {\n        dispatch(toggleTableModal());\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","/**\n * @flow\n */\nimport React, { Component } from 'react';\nimport Modal from 'react-bootstrap/lib/Modal';\n\ntype Props = {\n    name: string,\n    showModal: boolean,\n    editMode: boolean,\n    saveDbName: (name: string, editMode: boolean) => void,\n    toggleDbModal: () => void\n};\n\nclass DbModal extends Component<Props> {\n    // Flow type for ref\n    dbname: any\n\n    handleSubmit = (event: Event) => {\n        event.preventDefault();\n        const name = this.dbname.value.trim();\n\n        if (!name) {\n            return;\n        }\n\n        const { editMode, saveDbName } = this.props;\n\n        saveDbName(name, editMode);\n    }\n\n    toggleDbModal = () => {\n        const { editMode, toggleDbModal } = this.props;\n\n        if (editMode) {\n            toggleDbModal();\n        }\n    }\n\n    render() {\n        console.log('DbModal rendering'); // eslint-disable-line no-console\n        const { name, showModal } = this.props;\n\n        return (\n            <Modal show={ showModal } onHide={ this.toggleDbModal }>\n                <Modal.Body>\n                    <form onSubmit={ this.handleSubmit }>\n                        <input\n                            className='form-control input-lg'\n                            ref={ (dbname) => { this.dbname = dbname; } }\n                            type='text'\n                            placeholder='Enter database name'\n                            defaultValue={ name }\n                            autoFocus\n                        />\n                    </form>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport default DbModal;\n","/**\n * @flow\n */\nimport { connect } from 'react-redux';\nimport DbModal from '../../components/Modals/DbModal';\nimport { saveDbName, toggleTableModal, toggleDbModal } from '../../actions/ActionCreators';\n\nconst mapStateToProps = (state) => ({\n    name: state.database.name,\n    showModal: state.ui.database.showModal,\n    editMode: state.ui.database.edit\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    saveDbName: (name, editMode) => {\n        dispatch(saveDbName(name));\n        dispatch(toggleDbModal());\n\n        if (!editMode) {\n            // First time, show table modal\n            dispatch(toggleTableModal());\n        }\n    },\n    toggleDbModal: () => {\n        dispatch(toggleDbModal());\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DbModal);\n","/**\n * Function for shallow comparison between two objects\n * https://github.com/reactjs/react-redux/blob/master/src/utils/shallowEqual.js\n */\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction shallowEqual(a, b) { // eslint-disable-line flowtype/require-parameter-type\n    if (a === b) {\n        return true;\n    }\n\n    let countA = 0;\n    let countB = 0;\n\n    for (const key in a) { // eslint-disable-line no-restricted-syntax\n        if (hasOwn.call(a, key) && a[key] !== b[key]) {\n            return false;\n        }\n\n        countA += 1;\n    }\n\n    for (const key in b) { // eslint-disable-line no-restricted-syntax\n        if (hasOwn.call(b, key)) {\n            countB += 1;\n        }\n    }\n\n    return countA === countB;\n}\n\nexport default shallowEqual;\n","/**\n * @flow\n */\nimport React, { Component } from 'react';\nimport Modal from 'react-bootstrap/lib/Modal';\nimport classnames from 'classnames';\nimport findIndex from 'lodash/findIndex';\nimport type { TableType } from '../../utils/flowtypes';\nimport shallowEqual from '../../utils/shallowEqual';\n\ntype Props = {\n    showTableModal: boolean,\n    editMode: boolean,\n    editData: TableType,\n    tables: Array<TableType>,\n    toggleTableModal: () => void,\n    saveTable: (data: TableType) => void,\n    updateTable: (data: TableType) => void\n};\n\ntype State = {\n    duplicateName: boolean\n};\n\nclass TableModal extends Component<Props, State> {\n    state = {\n        duplicateName: false\n    }\n\n    // Flow type for refs\n    name: any\n    color: any\n    softdelete: any\n    timestamp: any\n\n    focusInput = () => {\n        this.name.focus();\n    }\n\n    handleSubmit = (event: Event) => {\n        event.preventDefault();\n\n        const { saveTable, updateTable, editMode, editData, tables } = this.props;\n\n        const data = {\n            id: editMode ? editData.id : Math.random().toString(36).substring(7),\n            name: this.name.value.trim(),\n            color: this.color.value.trim(),\n            softDelete: this.softdelete.checked,\n            timeStamp: this.timestamp.checked\n        };\n\n        if (!data.name) {\n            return;\n        }\n\n        const duplicate = findIndex(tables, (table) => table.name === data.name);\n\n        if (duplicate !== -1 && data.name !== editData.name) {\n            // Duplicate table name\n            this.setState({ duplicateName: true });\n            return;\n        }\n\n        if (editMode) {\n            // Only update if data is changed\n            if (!shallowEqual(data, editData)) {\n                updateTable(data);\n            }\n\n            this.toggleTableModal();\n        } else {\n            saveTable(data);\n        }\n\n        // Reset state\n        this.setState({ duplicateName: false });\n    }\n\n    toggleTableModal = () => {\n        // Reset state\n        this.setState({ duplicateName: false });\n\n        this.props.toggleTableModal();\n    }\n\n    render() {\n        console.log('TableModal rendering'); // eslint-disable-line no-console\n        const { showTableModal, editData, editMode } = this.props;\n        const { duplicateName } = this.state;\n\n        return (\n            <Modal\n                show={ showTableModal }\n                onEntered={ this.focusInput }\n                onHide={ this.toggleTableModal }\n                dialogClassName='modal-sm'\n            >\n                <Modal.Header>\n                    <button type='button' className='close' onClick={ this.toggleTableModal }>\n                        <span>&times;</span>\n                    </button>\n                    <Modal.Title>\n                        {editMode ? 'Update Table' : 'Create Table'}\n                    </Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <form className='form-horizontal' onSubmit={ this.handleSubmit }>\n                        <div className={ classnames('form-group', { 'has-error': duplicateName }) }>\n                            <label className='col-xs-2 control-label' htmlFor='name'>Name:</label>\n                            <div className='col-xs-10'>\n                                <input\n                                    type='text'\n                                    id='name'\n                                    ref={ (name) => {\n                                        this.name = name;\n                                    } }\n                                    className='form-control'\n                                    defaultValue={ editData.name }\n                                />\n                            </div>\n\n                            {duplicateName &&\n                            <span className='col-xs-offset-2 col-xs-10 help-block'>\n                                Duplicate table name\n                            </span>\n                            }\n                        </div>\n                        <div className='form-group'>\n                            <label className='col-xs-2 control-label' htmlFor='color'>Color:</label>\n                            <div className='col-xs-10'>\n                                <select\n                                    type='text'\n                                    id='color'\n                                    ref={ (color) => { this.color = color; } }\n                                    className='form-control'\n                                    defaultValue={ editData.color }\n                                >\n                                    <option value='table-header-maroon'>Maroon</option>\n                                    <option value='table-header-red'>Red</option>\n                                    <option value='table-header-orange'>Orange</option>\n                                    <option value='table-header-yellow'>Yellow</option>\n                                    <option value='table-header-olive'>Olive</option>\n                                    <option value='table-header-green'>Green</option>\n                                    <option value='table-header-purple'>Purple</option>\n                                    <option value='table-header-fuchsia'>Fuchsia</option>\n                                    <option value='table-header-lime'>Lime</option>\n                                    <option value='table-header-teal'>Teal</option>\n                                    <option value='table-header-aqua'>Aqua</option>\n                                    <option value='table-header-blue'>Blue</option>\n                                    <option value='table-header-navy'>Navy</option>\n                                    <option value='table-header-black'>Black</option>\n                                    <option value='table-header-gray'>Gray</option>\n                                    <option value='table-header-silver'>Silver</option>\n                                    <option value='table-header-white'>White</option>\n                                </select>\n                            </div>\n                        </div>\n\n                        <div className='checkbox'>\n                            <label htmlFor='softdelete'>\n                                <input\n                                    type='checkbox'\n                                    id='softdelete'\n                                    ref={ (softdelete) => {\n                                        this.softdelete = softdelete;\n                                    } }\n                                    defaultChecked={ editData.softDelete }\n                                /> Soft Delete\n                            </label>\n                        </div>\n                        <div className='checkbox'>\n                            <label htmlFor='timestamp'>\n                                <input\n                                    type='checkbox'\n                                    id='timestamp'\n                                    ref={ (timestamp) => {\n                                        this.timestamp = timestamp;\n                                    } }\n                                    defaultChecked={ editData.timeStamp }\n                                /> Timestamp\n                            </label>\n                        </div>\n                    </form>\n                </Modal.Body>\n\n                <Modal.Footer className='modal-footer text-right'>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={ this.handleSubmit }\n                    >{editMode ? 'Update' : 'Save'}\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={ this.toggleTableModal }\n                    >Cancel\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default TableModal;\n","/**\n * @flow\n */\nimport { connect } from 'react-redux';\nimport TableModal from '../../components/Modals/TableModal';\nimport { saveTable, toggleTableModal, updateTable } from '../../actions/ActionCreators';\n\nconst mapStateToProps = (state) => ({\n    showTableModal: state.ui.table.showModal,\n    editMode: state.ui.table.edit,\n    editData: state.ui.table.editData,\n    tables: state.tables\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    toggleTableModal: () => {\n        dispatch(toggleTableModal());\n    },\n    saveTable: (data) => {\n        dispatch(saveTable(data));\n        dispatch(toggleTableModal());\n    },\n    updateTable: (data) => {\n        dispatch(updateTable(data));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableModal);\n","/**\n * @flow\n */\nimport React, { PureComponent } from 'react';\nimport find from 'lodash/find';\nimport type { ColumnType, ForeignKeyType, TableType } from '../../utils/flowtypes';\n\ntype Props = {\n    tables: Array<TableType>,\n    columns: {\n        [tableId: string]: Array<ColumnType>\n    },\n    data: ForeignKeyType\n};\n\ntype State = {\n    currentForeignTableId: string,\n    currentForeignTableName: string,\n    currentForeignColumnId: string,\n    currentForeignColumnName: string\n};\n\nclass ForeignKeyForm extends PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        const { data } = props;\n\n        this.state = {\n            currentForeignTableId: data.on.id,\n            currentForeignTableName: data.on.name,\n            currentForeignColumnId: data.references.id,\n            currentForeignColumnName: data.references.name\n        };\n    }\n\n    props: Props\n\n    state: State\n\n    getData = () => {\n        const {\n            currentForeignColumnId,\n            currentForeignColumnName,\n            currentForeignTableId,\n            currentForeignTableName\n        } = this.state;\n\n        let invalidData = false;\n\n        if (!currentForeignTableId || !currentForeignColumnId) {\n            invalidData = true;\n        }\n\n        return {\n            references: {\n                id: invalidData ? '' : currentForeignColumnId,\n                name: invalidData ? '' : currentForeignColumnName\n            },\n            on: {\n                id: invalidData ? '' : currentForeignTableId,\n                name: invalidData ? '' : currentForeignTableName\n            }\n        };\n    }\n\n    setCurrentForeignTable = (event: { target: { value: string } }) => {\n        const { tables } = this.props;\n\n        const selected = event.target.value;\n        let name = '';\n\n        if (selected) {\n            // eslint-disable-next-line\n            name = find(tables, { id: selected }).name;\n        }\n\n        this.setState({\n            currentForeignTableId: selected,\n            currentForeignTableName: name,\n            currentForeignColumnId: '',\n            currentForeignColumnName: ''\n        });\n    }\n\n    setCurrentForeignColumn = (event: { target: { value: string } }) => {\n        const { columns } = this.props;\n        const { currentForeignTableId } = this.state;\n\n        const selected = event.target.value;\n        let name = '';\n\n        if (selected) {\n            // eslint-disable-next-line\n            name = find(columns[currentForeignTableId], { id: selected }).name;\n        }\n\n        this.setState({\n            currentForeignColumnId: selected,\n            currentForeignColumnName: name\n        });\n    }\n\n    render() {\n        console.log('ForeignKeyForm rendering'); // eslint-disable-line no-console\n        const { tables, data, columns } = this.props;\n        const { currentForeignTableId } = this.state;\n\n        return (\n            <div className='form-group'>\n                <strong className='col-xs-3 control-label'>Foreign Key:</strong>\n                <span className='col-xs-2 control-label'>References:</span>\n                <div className='col-xs-3'>\n                    <select\n                        className='form-control'\n                        defaultValue={ data.references.id }\n                        onChange={ this.setCurrentForeignColumn }\n                    >\n                        <option value=''>None</option>\n\n                        { columns[currentForeignTableId] !== undefined &&\n                            columns[currentForeignTableId]\n                                .filter((column) => !column.foreignKey.on.id)\n                                .map((column) => (\n                                    <option key={ column.id } value={ column.id }>\n                                        { column.name }\n                                    </option>\n                                ))\n                        }\n                    </select>\n                </div>\n                <span className='col-xs-1 control-label'>On:</span>\n                <div className='col-xs-3'>\n                    <select\n                        className='form-control'\n                        defaultValue={ data.on.id }\n                        onChange={ this.setCurrentForeignTable }\n                    >\n                        <option value=''>None</option>\n                        { tables.map((table) => (\n                            <option key={ table.id } value={ table.id }>\n                                { table.name }\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ForeignKeyForm;\n","/**\n * @flow\n */\nimport React, { Component } from 'react';\nimport Modal from 'react-bootstrap/lib/Modal';\nimport classnames from 'classnames';\nimport findIndex from 'lodash/findIndex';\nimport ForeignKeyForm from './ForeignKeyForm';\nimport type { ColumnType, TableType } from '../../utils/flowtypes';\nimport { isFractionType } from '../../utils/helpers';\n\ntype Props = {\n    showColumnModal: boolean,\n    editMode: boolean,\n    editData: ColumnType,\n    tableId: string,\n    tables: Array<TableType>,\n    columns: {\n        [tableId: string]: Array<ColumnType>\n    },\n    toggleColumnModal: () => void,\n    saveColumn: (data: ColumnType, tableId: string, hideModal?: boolean) => void,\n    updateColumn: (data: ColumnType, tableId: string) => void\n};\n\ntype State = {\n    columnType: string,\n    duplicateName: boolean,\n    foreignKeyEnabled: boolean,\n    isUnsigned: boolean\n};\n\nclass ColumnModal extends Component<Props, State> {\n    state = {\n        columnType: '',\n        duplicateName: false,\n        foreignKeyEnabled: false,\n        isUnsigned: false\n    }\n\n    // Flow type for refs\n    name: any\n    type: any\n    length: any\n    defValue: any\n    comment: any\n    autoInc: any\n    nullable: any\n    unique: any\n    index: any\n    unsigned: any\n    foreignKey: any\n    form: any\n\n    componentWillReceiveProps(nextProps: Props) {\n        // For edit action\n        this.setState({\n            columnType: nextProps.editData.type,\n            duplicateName: false,\n            foreignKeyEnabled: !!nextProps.editData.foreignKey.on.id,\n            isUnsigned: nextProps.editData.unsigned\n        });\n    }\n\n    getFormData = () => {\n        const data = {\n            name: this.name.value.trim(),\n            type: this.type.value,\n            length: this.length.value.trim(),\n            defValue: this.defValue.value.trim(),\n            comment: this.comment.value.trim(),\n            autoInc: this.autoInc.checked,\n            nullable: this.nullable.checked,\n            unique: this.unique.checked,\n            index: this.index.checked,\n            unsigned: this.unsigned.checked,\n            foreignKey: {\n                references: {\n                    id: '',\n                    name: ''\n                },\n                on: {\n                    id: '',\n                    name: ''\n                }\n            }\n        };\n\n        if (this.foreignKey) {\n            data.foreignKey = this.foreignKey.getData();\n        }\n\n        if (!data.name) {\n            return false;\n        }\n\n        const { tableId, columns, editData } = this.props;\n\n        const duplicate = findIndex(columns[tableId], (column) => column.name === data.name);\n\n        if (duplicate !== -1 && data.name !== editData.name) {\n            // Duplicate column name\n            this.setState({ duplicateName: true });\n            return false;\n        }\n\n        // Reset all state variables\n        this.setState({\n            columnType: '',\n            duplicateName: false,\n            foreignKeyEnabled: false,\n            isUnsigned: false\n        });\n\n        return data;\n    }\n\n    handleSubmit = (event: Event) => {\n        event.preventDefault();\n    }\n\n    saveColumnAndContinue = () => {\n        const data = this.getFormData();\n\n        if (!data) {\n            return;\n        }\n\n        const { saveColumn, tableId } = this.props;\n        const hideModal = false;\n\n        saveColumn({\n            id: Math.random().toString(36).substring(7),\n            ...data\n        }, tableId, hideModal);\n\n        this.form.reset();\n    }\n\n    saveColumnAndExit = () => {\n        const data = this.getFormData();\n\n        if (!data) {\n            return;\n        }\n\n        const { saveColumn, updateColumn, editMode, editData, tableId } = this.props;\n\n        if (editMode) {\n            updateColumn({\n                id: editData.id,\n                ...data\n            }, tableId);\n        } else {\n            saveColumn({\n                id: Math.random().toString(36).substring(7),\n                ...data\n            }, tableId);\n        }\n    }\n\n    updateColumnType = (event: { target: { value: string } }) => {\n        this.setState({ columnType: event.target.value });\n    }\n\n    updateUnsignedValue = (event: { target: { checked: boolean } }) => {\n        this.setState({\n            isUnsigned: event.target.checked,\n            foreignKeyEnabled: false\n        });\n    }\n\n    updateForeignKeyValue = (event: { target: { checked: boolean } }) => {\n        this.setState({ foreignKeyEnabled: event.target.checked });\n    }\n\n    render() {\n        console.log('ColumnModal rendering'); // eslint-disable-line no-console\n        const {\n            columns,\n            editData,\n            editMode,\n            showColumnModal,\n            tables,\n            toggleColumnModal\n        } = this.props;\n        const { columnType, duplicateName, foreignKeyEnabled, isUnsigned } = this.state;\n\n        return (\n            <Modal\n                show={ showColumnModal }\n                onHide={ toggleColumnModal }\n            >\n                <Modal.Header>\n                    <button type='button' className='close' onClick={ toggleColumnModal }>\n                        <span>&times;</span>\n                    </button>\n                    <Modal.Title>\n                        { editMode ? 'Update Column' : 'Add Column' }\n                    </Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <form\n                        className='form-horizontal'\n                        ref={ (form) => { this.form = form; } }\n                        onSubmit={ this.handleSubmit }\n                    >\n                        <div className={ classnames('form-group', { 'has-error': duplicateName }) }>\n                            <label className='col-xs-3 control-label' htmlFor='name'>Name:</label>\n                            <div className='col-xs-9'>\n                                <input\n                                    type='text'\n                                    id='name'\n                                    ref={ (name) => { this.name = name; } }\n                                    className='form-control'\n                                    defaultValue={ editData.name }\n                                    autoFocus\n                                />\n                            </div>\n\n                            { duplicateName &&\n                                <span className='col-xs-offset-3 col-xs-9 help-block'>\n                                    Duplicate column name\n                                </span>\n                            }\n                        </div>\n                        <div className='form-group'>\n                            <label className='col-xs-3 control-label' htmlFor='type'>Type:</label>\n                            <div className='col-xs-9'>\n                                <select\n                                    className='form-control'\n                                    id='type'\n                                    ref={ (type) => { this.type = type; } }\n                                    defaultValue={ columnType }\n                                    onChange={ this.updateColumnType }\n                                >\n                                    <option value='integer'>INT</option>\n                                    <option value='uuid'>UUID</option>\n                                    <option value='string'>VARCHAR</option>\n                                    <option value='text'>TEXT</option>\n                                    <option value='date'>DATE</option>\n                                    <optgroup label='Numeric'>\n                                        <option value='tinyInteger'>TINYINT</option>\n                                        <option value='smallInteger'>SMALLINT</option>\n                                        <option value='mediumInteger'>MEDIUMINT</option>\n                                        <option value='bigInteger'>BIGINT</option>\n                                        <option value='boolean'>BOOLEAN</option>\n                                        <option disabled='disabled'>-</option>\n                                        <option value='decimal'>DECIMAL</option>\n                                        <option value='float'>FLOAT</option>\n                                        <option value='double'>DOUBLE</option>\n                                    </optgroup>\n                                    <optgroup label='Date and time'>\n                                        <option value='dateTime'>DATETIME</option>\n                                        <option value='timestamp'>TIMESTAMP</option>\n                                        <option value='time'>TIME</option>\n                                    </optgroup>\n                                    <optgroup label='String'>\n                                        <option value='char'>CHAR</option>\n                                        <option value='tinyText'>TINYTEXT</option>\n                                        <option value='mediumText'>MEDIUMTEXT</option>\n                                        <option value='longText'>LONGTEXT</option>\n                                    </optgroup>\n                                </select>\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label className='col-xs-3 control-label' htmlFor='length'>Length:</label>\n                            <div className='col-xs-9'>\n                                <input\n                                    type='text'\n                                    id='length'\n                                    ref={ (length) => { this.length = length; } }\n                                    className='form-control'\n                                    defaultValue={ editData.length }\n                                    placeholder={ !isFractionType(columnType) ? '' :\n                                        'Use comma separated value for decimal, double or float'\n                                    }\n                                />\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label className='col-xs-3 control-label' htmlFor='defVal'>\n                                Default Value:\n                            </label>\n                            <div className='col-xs-9'>\n                                <input\n                                    type='text'\n                                    id='defVal'\n                                    ref={ (defValue) => { this.defValue = defValue; } }\n                                    className='form-control'\n                                    defaultValue={ editData.defValue }\n                                />\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <label className='col-xs-3 control-label' htmlFor='comment'>Comment:</label>\n                            <div className='col-xs-9'>\n                                <input\n                                    type='text'\n                                    id='comment'\n                                    ref={ (comment) => { this.comment = comment; } }\n                                    className='form-control'\n                                    defaultValue={ editData.comment }\n                                />\n                            </div>\n                        </div>\n                        <div className='form-group'>\n                            <strong className='col-xs-3 control-label'>Misc:</strong>\n                            <div className='col-xs-9'>\n                                <label className='checkbox-inline' htmlFor='autoInc'>\n                                    <input\n                                        type='checkbox'\n                                        id='autoInc'\n                                        ref={ (autoInc) => { this.autoInc = autoInc; } }\n                                        defaultChecked={ editData.autoInc }\n                                    /> A.I.\n                                </label>\n                                <label className='checkbox-inline' htmlFor='nullable'>\n                                    <input\n                                        type='checkbox'\n                                        id='nullable'\n                                        ref={ (nullable) => { this.nullable = nullable; } }\n                                        defaultChecked={ editData.nullable }\n                                    /> Nullable\n                                </label>\n                                <label className='checkbox-inline' htmlFor='unique'>\n                                    <input\n                                        type='checkbox'\n                                        id='unique'\n                                        ref={ (unique) => { this.unique = unique; } }\n                                        defaultChecked={ editData.unique }\n                                    /> Unique\n                                </label>\n                                <label className='checkbox-inline' htmlFor='index'>\n                                    <input\n                                        type='checkbox'\n                                        id='index'\n                                        ref={ (index) => { this.index = index; } }\n                                        defaultChecked={ editData.index }\n                                    /> Index\n                                </label>\n                                <label className='checkbox-inline' htmlFor='unsigned'>\n                                    <input\n                                        type='checkbox'\n                                        id='unsigned'\n                                        ref={ (unsigned) => { this.unsigned = unsigned; } }\n                                        checked={ isUnsigned }\n                                        onChange={ this.updateUnsignedValue }\n                                    /> Unsigned\n                                </label>\n                            </div>\n                            <div className='col-xs-9 col-xs-offset-3'>\n                                <label\n                                    className={ classnames('checkbox-inline', { disabled: !isUnsigned }) }\n                                    htmlFor='foreign'\n                                >\n                                    <input\n                                        type='checkbox'\n                                        id='foreign'\n                                        checked={ foreignKeyEnabled }\n                                        disabled={ !isUnsigned }\n                                        onChange={ this.updateForeignKeyValue }\n                                    /> Foreign Key\n                                </label>\n                            </div>\n                        </div>\n\n                        { foreignKeyEnabled &&\n                            <ForeignKeyForm\n                                ref={ (foreignKey) => { this.foreignKey = foreignKey; } }\n                                columns={ columns }\n                                tables={ tables }\n                                data={ editData.foreignKey }\n                            />\n                        }\n                    </form>\n                </Modal.Body>\n\n                <Modal.Footer className='modal-footer text-right'>\n                    { !editMode &&\n                        <button\n                            type='button'\n                            className='btn btn-primary'\n                            onClick={ this.saveColumnAndContinue }\n                        >Save &amp; Continue\n                        </button>\n                    }\n\n                    <button type='button' className='btn btn-primary' onClick={ this.saveColumnAndExit }>\n                        { editMode ? 'Update Column' : 'Save & Exit' }\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-default'\n                        onClick={ toggleColumnModal }\n                    >Cancel\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default ColumnModal;\n","/**\n * @flow\n */\nimport { connect } from 'react-redux';\nimport ColumnModal from '../../components/Modals/ColumnModal';\nimport {\n    saveColumn,\n    toggleColumnModal,\n    updateColumn,\n    saveForeignKeyRelation,\n    updateForeignKeyRelation\n} from '../../actions/ActionCreators';\n\nconst mapStateToProps = (state) => ({\n    showColumnModal: state.ui.column.showModal,\n    editMode: state.ui.column.edit,\n    editData: state.ui.column.editData,\n    tableId: state.ui.column.tableId,\n    tables: state.tables,\n    columns: state.columns\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    toggleColumnModal: () => {\n        dispatch(toggleColumnModal());\n    },\n    saveColumn: (data, tableId, hideModal = true) => {\n        dispatch(saveColumn(data, tableId));\n        dispatch(saveForeignKeyRelation(data, tableId));\n\n        if (hideModal) {\n            dispatch(toggleColumnModal());\n        }\n    },\n    updateColumn: (data, tableId) => {\n        dispatch(updateColumn(data, tableId));\n        dispatch(updateForeignKeyRelation(data, tableId));\n        dispatch(toggleColumnModal());\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnModal);\n","/**\n * @flow\n */\nimport noop from 'lodash/noop';\nimport React, { PureComponent } from 'react';\nimport type { ColumnType } from '../utils/flowtypes';\n\ntype Props = {\n    data: ColumnType,\n    tableId: string,\n    onRemoveColumn: (data: ColumnType, tabledId: string) => void,\n    onEditColumn: (data: ColumnType, tabledId: string) => void\n};\n\nclass Column extends PureComponent<Props> {\n    editColumn = () => {\n        const { data, onEditColumn, tableId } = this.props;\n        onEditColumn(data, tableId);\n    }\n\n    removeColumn = () => {\n        const { data, onRemoveColumn, tableId } = this.props;\n        onRemoveColumn(data, tableId);\n    }\n\n    render() {\n        console.log('Column rendering'); // eslint-disable-line no-console\n        const { data } = this.props;\n\n        return (\n            <li className='clearfix' id={ data.id }>\n                <div className='pull-left' title={ data.comment ? data.comment : `${ data.name } (${ data.type })` }>\n                    <span>{ data.name }</span>\n                    { !!data.autoInc && <sup>PK</sup> }\n                    { !!data.foreignKey.references.id && <sup>FK</sup> }\n                    <small>({ data.type })</small>\n                </div>\n                <div className='pull-right'>\n                    <span\n                        className='fa fa-pencil'\n                        onClick={ this.editColumn }\n                        onKeyPress={ noop }\n                    >\n                    </span>\n                    <span\n                        className='fa fa-remove'\n                        onClick={ this.removeColumn }\n                        onKeyPress={ noop }\n                    >\n                    </span>\n                </div>\n            </li>\n        );\n    }\n}\n\nexport default Column;\n","/**\n * @flow\n */\nimport React, { PureComponent } from 'react';\nimport Column from './Column';\nimport type { TableType, ColumnType } from '../utils/flowtypes';\n\ntype Props = {\n    columns: Array<ColumnType>,\n    table: TableType,\n    removeColumn: (data: ColumnType, tabledId: string) => void,\n    editColumn: (data: ColumnType, tabledId: string) => void\n};\n\nclass Columns extends PureComponent<Props> {\n    render() {\n        console.log('Columns rendering'); // eslint-disable-line no-console\n        const { columns, table, removeColumn, editColumn } = this.props;\n\n        if (columns.length === 0 && !table.softDelete && !table.timeStamp) {\n            return null;\n        }\n\n        return (\n            <ul className='db-columns'>\n                { columns.map((column) => (\n                    <Column\n                        key={ column.id }\n                        data={ column }\n                        tableId={ table.id }\n                        onRemoveColumn={ removeColumn }\n                        onEditColumn={ editColumn }\n                    />\n                ))}\n\n                { table.softDelete &&\n                    <li className='clearfix'>\n                        <div className='pull-left'>softDelete</div>\n                    </li>\n                }\n\n                { table.timeStamp &&\n                    <li className='clearfix'>\n                        <div className='pull-left'>timeStamps</div>\n                    </li>\n                }\n            </ul>\n        );\n    }\n}\n\nexport default Columns;\n","/**\n * @flow\n */\nimport { connect } from 'react-redux';\nimport Columns from '../components/Columns';\nimport { removeColumn, enableColumnEdit, toggleColumnModal } from '../actions/ActionCreators';\n\nconst mapStateToProps = (state, ownProps) => ({\n    columns: state.columns[ownProps.table.id]\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    removeColumn: (columnData, tableId) => {\n        dispatch(removeColumn(columnData, tableId));\n    },\n    editColumn: (data, tableId) => {\n        dispatch(enableColumnEdit(data, tableId));\n        dispatch(toggleColumnModal(tableId));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Columns);\n","/**\n * @flow\n */\nimport noop from 'lodash/noop';\nimport React, { PureComponent } from 'react';\nimport Columns from '../containers/Columns';\nimport type { TableType } from '../utils/flowtypes';\n\ntype Props = {\n    data: TableType,\n    position: {\n        x: number,\n        y: number\n    },\n    onEditTable: (data: TableType) => void,\n    onRemoveTable: (id: string) => void,\n    onToggleColumnModal: (id: string) => void\n};\n\nclass Table extends PureComponent<Props> {\n    editTable = () => {\n        const { data, onEditTable } = this.props;\n        onEditTable(data);\n    }\n\n    removeTable = () => {\n        const { data, onRemoveTable } = this.props;\n        onRemoveTable(data.id);\n    }\n\n    toggleColumnModal = () => {\n        const { data, onToggleColumnModal } = this.props;\n        onToggleColumnModal(data.id);\n    }\n\n    render() {\n        console.log('Table rendering'); // eslint-disable-line no-console\n        const { data, position } = this.props;\n\n        return (\n            <div\n                className='db-table draggable no-select'\n                id={ data.id }\n                style={ { left: position.x, top: position.y } }\n            >\n                <div className={ `table-header clearfix ${ data.color }` }>\n                    <h4 className='pull-left' title={ data.name }>{ data.name }</h4>\n                    <div className='pull-right'>\n                        <span\n                            className='fa fa-plus'\n                            onClick={ this.toggleColumnModal }\n                            onKeyPress={ noop }\n                        >\n                        </span>\n                        <span\n                            className='fa fa-pencil'\n                            onClick={ this.editTable }\n                            onKeyPress={ noop }\n                        >\n                        </span>\n                        <span\n                            className='fa fa-remove'\n                            onClick={ this.removeTable }\n                            onKeyPress={ noop }\n                        >\n                        </span>\n                    </div>\n                </div>\n\n                <Columns table={ data } />\n            </div>\n        );\n    }\n}\n\nexport default Table;\n","/**\n * @flow\n */\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport Table from '../components/Table';\n\nconst positionSelector = () => (\n    createSelector(\n        (state, props) => state.ui.positions[props.data.id],\n        (position) => position\n    )\n);\n\nconst mapStateToProps = () => {\n    // Make new copy of position for each table\n    const getPosition = positionSelector();\n\n    return (state, ownProps) => ({\n        position: getPosition(state, ownProps)\n    });\n};\n\nexport default connect(mapStateToProps)(Table);\n","/**\n * @flow\n */\nimport React, { Component } from 'react';\nimport jsPlumb from 'jsplumb';\nimport Table from '../containers/Table';\nimport type { TableType, TablePositionType } from '../utils/flowtypes';\n\ntype Props = {\n    tables: Array<TableType>,\n    editTable: (data: TableType) => void,\n    removeTable: (id: string) => void,\n    storeTablePosition: (data: TablePositionType) => void,\n    toggleColumnModal: (id: string) => void\n};\n\nclass Tables extends Component<Props> {\n    componentDidMount() {\n        // Needed for initial render from localStorage\n        this.makeTablesDraggable();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        const { tables } = this.props;\n\n        if (tables.length !== prevProps.tables.length) {\n            // New tables available, make all tables draggable\n            this.makeTablesDraggable();\n        }\n    }\n\n    makeTablesDraggable = () => {\n        const { storeTablePosition } = this.props;\n\n        jsPlumb.ready(() => {\n            jsPlumb.draggable(document.querySelectorAll('.draggable:not(.jtk-draggable)'), {\n                // containment: 'parent',\n                drag: (event) => {\n                    if (event.pos[0] < 0 || event.pos[1] < 0) {\n                        const table = document.getElementById(event.el.id);\n\n                        if (table === null) {\n                            return;\n                        }\n\n                        if (event.pos[0] < 0) {\n                            table.style.left = '0px';\n                        }\n\n                        if (event.pos[1] < 0) {\n                            table.style.top = '0px';\n                        }\n                    }\n\n                    // Repaint all the connections\n                    jsPlumb.repaintEverything();\n                },\n                stop: (event) => {\n                    const newPos = {\n                        id: event.el.id,\n                        x: event.finalPos[0],\n                        y: event.finalPos[1]\n                    };\n\n                    storeTablePosition(newPos);\n\n                    // Make the current table's z-index larger than the others\n                    const tables = document.querySelectorAll('.db-table');\n\n                    for (let i = 0; i < tables.length; i += 1) {\n                        tables[i].style.zIndex = '100';\n\n                        if (tables[i].id === event.el.id) {\n                            tables[i].style.zIndex = '150';\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    render() {\n        console.log('Tables rendering'); // eslint-disable-line no-console\n        const { tables, removeTable, editTable, toggleColumnModal } = this.props;\n\n        if (tables.length === 0) {\n            return null;\n        }\n\n        return (\n            <div className='table-wrapper'>\n                { tables.map((table) => (\n                    <Table\n                        key={ table.id }\n                        data={ table }\n                        onRemoveTable={ removeTable }\n                        onEditTable={ editTable }\n                        onToggleColumnModal={ toggleColumnModal }\n                    />\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default Tables;\n","/**\n * @flow\n */\nimport { connect } from 'react-redux';\nimport Tables from '../components/Tables';\nimport {\n    removeTable,\n    enableTableEdit,\n    toggleTableModal,\n    toggleColumnModal,\n    storeTablePosition\n} from '../actions/ActionCreators';\n\nconst mapStateToProps = (state) => ({\n    tables: state.tables\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    removeTable: (id) => {\n        dispatch(removeTable(id));\n    },\n    editTable: (data) => {\n        dispatch(enableTableEdit(data));\n        dispatch(toggleTableModal());\n    },\n    toggleColumnModal: (tableId) => {\n        dispatch(toggleColumnModal(tableId));\n    },\n    storeTablePosition: (newPos) => {\n        dispatch(storeTablePosition(newPos));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tables);\n","/**\n * @flow\n */\nimport React from 'react';\nimport DrawRelationLine from './DrawRelationLine';\nimport Header from '../containers/Header';\nimport DbModal from '../containers/Modals/DbModal';\nimport TableModal from '../containers/Modals/TableModal';\nimport ColumnModal from '../containers/Modals/ColumnModal';\nimport Tables from '../containers/Tables';\n\nconst Schema = () => {\n    console.log('Schema rendering'); // eslint-disable-line no-console\n\n    return (\n        <div className='container-fluid'>\n            <Header />\n\n            <Tables />\n\n            <DbModal />\n\n            <TableModal />\n\n            <ColumnModal />\n\n            <DrawRelationLine />\n        </div>\n    );\n};\n\nexport default Schema;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Schema from './components/Schema';\nimport './styles/bootstrap.css';\nimport './styles/main.css';\n\nconst App = () => (\n    <Provider store={ store }>\n        <Schema />\n    </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport App from './app';\n\nconst dom = document.getElementById('root');\nrender(\n    <AppContainer>\n        <App />\n    </AppContainer>,\n    dom\n);\n\nif (module.hot) {\n    module.hot.accept('./app', () => {\n        const NextApp = require('./app').default; // eslint-disable-line global-require\n        render(\n            <AppContainer>\n                <NextApp />\n            </AppContainer>,\n            dom\n        );\n    });\n}\n"],"sourceRoot":""}